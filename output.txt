Lexemes 	 Tokens

public		public
class		class
LexicalAnalyzerTest		ID
{		Left_Curly_Bracket
public		public
static		static
void		void
main		ID
(		left_Paranthesis
String		ID
[		Left_Square_Bracket
]		Right_Square_Bracket
args		ID
)		Right_Paranthesis
{		Left_Curly_Bracket
int		int
a		ID
=		Assign_Op
10		INT_LITERAL
,		comma
b		ID
=		Assign_Op
20		INT_LITERAL
;		semi_colon
float		float
c		ID
=		Assign_Op
30.5f		DOUBLE_LITERAL
;		semi_colon
double		double
d		ID
=		Assign_Op
40.123		DOUBLE_LITERAL
;		semi_colon
char		char
ch		ID
=		Assign_Op
'X'		CHAR_LITERAL
;		semi_colon
String		ID
str		ID
=		Assign_Op
"Hello, World!"		STRING_LITERAL
;		semi_colon
int		int
sum		ID
=		Assign_Op
a		ID
+		Plus_Op
b		ID
;		semi_colon
int		int
diff		ID
=		Assign_Op
a		ID
-		Minus_Op
b		ID
;		semi_colon
int		int
product		ID
=		Assign_Op
a		ID
*		Mult_Op
b		ID
;		semi_colon
int		int
quotient		ID
=		Assign_Op
a		ID
/		Div_Op
b		ID
;		semi_colon
int		int
remainder		ID
=		Assign_Op
a		ID
%		Mod_Op
b		ID
;		semi_colon
a		ID
+=		PlusAssign_Op
5		INT_LITERAL
;		semi_colon
b		ID
-=		MinusAssign_Op
3		INT_LITERAL
;		semi_colon
c		ID
*=		MultAssign_Op
2		INT_LITERAL
;		semi_colon
d		ID
/=		DivAssign_Op
2.0		DOUBLE_LITERAL
;		semi_colon
a		ID
%=		ModAssign_Op
2		INT_LITERAL
;		semi_colon
boolean		boolean
result1		ID
=		Assign_Op
(		left_Paranthesis
a		ID
<		LessT_Op
b		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
result2		ID
=		Assign_Op
(		left_Paranthesis
a		ID
<=		LessT_Equal
b		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
result3		ID
=		Assign_Op
(		left_Paranthesis
a		ID
>		GreaterT_Op
b		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
result4		ID
=		Assign_Op
(		left_Paranthesis
a		ID
>=		GreaterT_Equal
b		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
result5		ID
=		Assign_Op
(		left_Paranthesis
a		ID
==		Equality_Op
b		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
result6		ID
=		Assign_Op
(		left_Paranthesis
a		ID
!=		Not_Equal
b		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
logic1		ID
=		Assign_Op
(		left_Paranthesis
result1		ID
&&		LogicAnd_Op
result2		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
logic2		ID
=		Assign_Op
(		left_Paranthesis
result3		ID
||		LogicOr_Op
result4		ID
)		Right_Paranthesis
;		semi_colon
boolean		boolean
logic3		ID
=		Assign_Op
!		LogicalNot_Op
result5		ID
;		semi_colon
a		ID
++		inc_Op
;		semi_colon
b		ID
--		dec_Op
;		semi_colon
int		int
x		ID
=		Assign_Op
100		INT_LITERAL
;		semi_colon
System		ID
.		dot_symbol
out		ID
.		dot_symbol
println		ID
(		left_Paranthesis
"Testing lexical analyzer:"		STRING_LITERAL
)		Right_Paranthesis
;		semi_colon
System		ID
.		dot_symbol
out		ID
.		dot_symbol
println		ID
(		left_Paranthesis
"Sum: "		STRING_LITERAL
+		Plus_Op
sum		ID
)		Right_Paranthesis
;		semi_colon
System		ID
.		dot_symbol
out		ID
.		dot_symbol
println		ID
(		left_Paranthesis
"Character: "		STRING_LITERAL
+		Plus_Op
ch		ID
)		Right_Paranthesis
;		semi_colon
System		ID
.		dot_symbol
out		ID
.		dot_symbol
println		ID
(		left_Paranthesis
"String: "		STRING_LITERAL
+		Plus_Op
str		ID
)		Right_Paranthesis
;		semi_colon
}		Right_Curly_Bracket
}		Right_Curly_Bracket
